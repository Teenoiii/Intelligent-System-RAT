import streamlit as st
import numpy as np
import tensorflow as tf
import pandas as pd
import joblib

# üìå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
model = tf.keras.models.load_model("models/car_price_model.keras")

# üìå ‡πÇ‡∏´‡∏•‡∏î Column Transformer
ct = joblib.load("models/column_transformer.pkl")

# üìå ‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
EXCHANGE_RATE = 0.42  # 1 ‡∏£‡∏π‡∏õ‡∏µ ‚âà 0.42 ‡∏ö‡∏≤‡∏ó

# ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ‡∏à‡∏≤‡∏Å Column Transformer
car_brands = list(ct.transformers_[1][1].categories_[2])  # ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ
car_models = list(ct.transformers_[1][1].categories_[3])  # ‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ

st.title("üöó ‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢ AI")

# ‚úÖ UI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
fuel_type = st.selectbox("‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÄ‡∏û‡∏•‡∏¥‡∏á", ["Petrol", "Diesel", "CNG", "Electric", "Lpg"])
transmission = st.selectbox("‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå", ["Manual", "Automatic"])
car_company = st.selectbox("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå", car_brands)

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
filtered_models = [m for m in car_models if car_company.lower() in m.lower()]
if not filtered_models:  
    filtered_models = car_models  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏∏‡∏Å‡∏£‡∏∏‡πà‡∏ô

car_model = st.selectbox("‡∏£‡∏∏‡πà‡∏ô‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå (Car Model)", filtered_models)

manufacture = st.number_input("‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï", min_value=1990, max_value=2023, value=2020)
kms_driven = st.number_input("‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß (‡∏Å‡∏°.)", min_value=1000, max_value=500000, value=50000)
engine_cc = st.number_input("‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå (cc)", min_value=500, max_value=5000, value=1500)
seats = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á", min_value=2, max_value=10, value=5)
ownership = st.slider("‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏ñ", 1, 5, 1)

# ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
if st.button("üìä ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ñ"):
    try:
        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
        input_data = pd.DataFrame([[fuel_type, transmission, car_company, car_model, manufacture, kms_driven, engine_cc, seats, ownership]],
                                  columns=["fuel_type", "transmission", "car_company_name", "car_model_name",
                                           "manufacture", "kms_deriven_numeric", "engine_cc_numeric", "seats_numeric", "ownership_numeric"])

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Column Transformer
        input_normalized = ct.transform(input_data)

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
        predicted_price = model.predict(input_normalized)[0][0]

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á Lakh ‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏π‡∏õ‡∏µ
        predicted_price_inr = predicted_price * 100000  

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏ö‡∏≤‡∏ó
        predicted_price_thb = predicted_price_inr * EXCHANGE_RATE

        # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        st.success(f"üöó ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå: {predicted_price_thb:,.2f} ‡∏ö‡∏≤‡∏ó")

    except Exception as e:
        st.error(f"üö® ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå: {e}")
